@page "/appointments"
@using TerminBooking.Data
@using TerminBooking.Domain
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext Db

@attribute [Microsoft.AspNetCore.Authorization.Authorize]

<h3>Upravljanje terminima</h3>

<!-- Odabir djelatnika -->
<div class="mb-3">
    <label class="form-label">Djelatnik</label>
    <select class="form-select" value="@SelectedStaffIdString" @onchange="OnStaffChanged">
        <option value="">-- Odaberi djelatnika --</option>
        @foreach (var s in staffList)
        {
            <option value="@s.Id">@s.Name</option>
        }
    </select>
</div>

<!-- Datum -->
<div class="mb-3">
    <label class="form-label">Datum</label>
    <InputDate @bind-Value="SelectedDate" TValue="DateTime" class="form-control" />
</div>

@if (!SelectedStaffId.HasValue)
{
    <div class="alert alert-warning">Odaberi djelatnika kako bi vidjela njegove bookirane termine.</div>
}
else
{
    <div class="d-flex justify-content-between align-items-center mb-2">
        <h5>Bookirani termini — @CurrentStaffName — @SelectedDate.ToString("dd.MM.yyyy.") (@booked.Count)</h5>

        <button class="btn btn-primary" @onclick="() => showAddBlock = true">Dodaj blok (Booked)</button>
    </div>

    <table class="table table-sm table-striped">
        <thead>
            <tr>
                <th>Početak</th>
                <th>Kraj</th>
                <th>Usluga</th>
                <th>Klijent</th>
                <th>Email</th>
                <th>Mobitel</th>
                <th>Napomena</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (booked.Count == 0)
            {
                <tr><td colspan="8" class="text-muted">Nema bookiranih termina za ovaj dan.</td></tr>
            }
            else
            {
                @foreach (var a in booked)
                {
                    <tr>
                        <td>@a.Start.ToString("HH:mm")</td>
                        <td>@a.End.ToString("HH:mm")</td>
                        <td>@a.Service?.Name</td>
                        <td>@a.Client?.FullName</td>
                        <td>@a.Client?.Email</td>
                        <td>@a.Client?.Phone</td>
                        <td>@a.Notes</td>
                        <td>
                            <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteBookingAsync(a.Id)">Obriši</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>

}

<!-- Modal: Dodaj blok (Booked) -->
@if (showAddBlock)
{
    <div class="modal d-block" tabindex="-1" style="background: rgba(0,0,0,.3);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Dodaj blok (Booked)</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddBlock"></button>
                </div>

                <div class="modal-body">
                    <div class="mb-2">
                        <label class="form-label">Usluga</label>
                        <select class="form-select" @onchange="OnServiceChanged">
                            <option value="">-- Odaberi --</option>
                            @foreach (var s in servicesForStaff)
                            {
                                <option value="@s.Id" selected="@(add_ServiceId == s.Id)">
                                    @s.Name (@s.DurationMin min)
                                </option>
                            }
                        </select>
                    </div>

                    @* NOVO: biramo samo početak iz slobodnih, kraj se računa *@
                    <div class="row g-2">
                        <div class="col-12">
                            <label class="form-label">Početak</label>
                            <select class="form-select" @onchange="OnStartTimeChangedFromSelect">
                                @if (availableStarts.Count == 0)
                                {
                                    <option value="">-- Nema slobodnih termina --</option>
                                }
                                else
                                {
                                    @foreach (var t in availableStarts)
                                    {
                                        <option value="@t" selected="@(t == add_StartTime)">@t</option>
                                    }
                                }
                            </select>
                            <div class="form-text">
                                @if (!string.IsNullOrEmpty(add_StartTime))
                                {
                                    <span>Kraj: @ComputedEndPreview</span>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="mt-2">
                        <label class="form-label">Napomena (opcionalno)</label>
                        <input class="form-control" value="@add_Notes" @onchange="OnNotesChanged" />
                    </div>

                    <hr />

                    <h6>Podaci o klijentu</h6>
                    <div class="mb-2">
                        <label class="form-label">Ime i prezime *</label>
                        <input class="form-control" value="@add_ClientFullName" @onchange="OnClientNameChanged" placeholder="Ime i prezime" />
                    </div>
                    <div class="row g-2">
                        <div class="col">
                            <label class="form-label">Email</label>
                            <input type="email" class="form-control" value="@add_ClientEmail" @onchange="OnClientEmailChanged" placeholder="ime@email.com" />
                        </div>
                        <div class="col">
                            <label class="form-label">Mobitel</label>
                            <input type="tel" class="form-control" value="@add_ClientPhone" @onchange="OnClientPhoneChanged" placeholder="091 234 5678" />
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(error))
                    {
                        <div class="alert alert-danger mt-3">@error</div>
                    }
                </div>

                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseAddBlock">Odustani</button>
                    <button class="btn btn-primary" @onclick="SaveAddBlockAsync" disabled="@isSaving">Spremi</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // ===== State =====
    private List<Staff> staffList = new();
    private int? SelectedStaffId { get; set; }
    private string SelectedStaffIdString => SelectedStaffId?.ToString() ?? "";

    private DateTime _selectedDate = DateTime.Today;
    private DateTime SelectedDate
    {
        get => _selectedDate;
        set
        {
            if (_selectedDate != value)
            {
                _selectedDate = value;
                _ = LoadDayAsync();
            }
        }
    }

    private string CurrentStaffName => staffList.FirstOrDefault(s => s.Id == SelectedStaffId)?.Name ?? "";

    private List<Appointment> booked = new();
    private List<Service> servicesForStaff = new();

    // modal state
    private bool showAddBlock = false;

    // sada biramo samo početak; kraj se računa automatski
    private string add_StartTime = "09:00"; // "HH:mm"
    private string add_EndTime = "10:00";   // stoji radi kompatibilnosti, ali računamo ga iz usluge

    private List<string> availableStarts = new(); // NOVO: slobodni početci za odabrani dan/uslugu

    private int? add_ServiceId;
    private string? add_Notes;
    private string? error;
    private bool isSaving = false;

    // klijent u modalu
    private string? add_ClientFullName;
    private string? add_ClientEmail;
    private string? add_ClientPhone;

    private void OnClientNameChanged(ChangeEventArgs e) => add_ClientFullName = e?.Value?.ToString();
    private void OnClientEmailChanged(ChangeEventArgs e) => add_ClientEmail = e?.Value?.ToString();
    private void OnClientPhoneChanged(ChangeEventArgs e) => add_ClientPhone = e?.Value?.ToString();

    // ===== Lifecycle =====
    protected override async Task OnInitializedAsync()
    {
        staffList = await Db.Staff.Where(x => x.IsActive).OrderBy(x => x.Name).ToListAsync();
        if (staffList.Any())
            SelectedStaffId = staffList.First().Id;

        await LoadDayAsync();
    }

    // ===== UI handlers =====
    private async Task OnStaffChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e?.Value?.ToString(), out var id))
            SelectedStaffId = id;
        else
            SelectedStaffId = null;

        await LoadDayAsync();
    }

    private void OnServiceChanged(ChangeEventArgs e)
    {
        add_ServiceId = int.TryParse(e?.Value?.ToString(), out var id) ? id : (int?)null;
        // osvježi listu slobodnih početaka i izračun kraja
        RebuildAvailableStarts();
        AutoComputeEnd();
        StateHasChanged();
    }

    // staro polje za vrijeme početka – sada iz <select>, ali ostavljamo handler
    private void OnStartTimeChanged(ChangeEventArgs e)
    {
        add_StartTime = e?.Value?.ToString() ?? add_StartTime;
        AutoComputeEnd();
    }

    // NOVO: handler baš za <select> početka
    private void OnStartTimeChangedFromSelect(ChangeEventArgs e)
    {
        add_StartTime = e?.Value?.ToString() ?? add_StartTime;
        AutoComputeEnd();
    }

    // end više ne unosimo ručno, ali ostavljam funkciju radi kompatibilnosti
    private void OnEndTimeChanged(ChangeEventArgs e)
        => add_EndTime = e?.Value?.ToString() ?? add_EndTime;

    private void OnNotesChanged(ChangeEventArgs e)
        => add_Notes = e?.Value?.ToString();

    // ===== Data load =====
    private async Task LoadDayAsync()
    {
        booked.Clear();
        servicesForStaff.Clear();
        error = null;

        if (!SelectedStaffId.HasValue)
        {
            availableStarts.Clear();
            StateHasChanged();
            return;
        }

        var dayStart = new DateTime(SelectedDate.Year, SelectedDate.Month, SelectedDate.Day, 0, 0, 0);
        var dayEnd = dayStart.AddDays(1);

        booked = await Db.Appointments
            .Include(a => a.Service)
            .Include(a => a.Client)
            .Where(a => a.StaffId == SelectedStaffId.Value &&
                        a.Status == AppointmentStatus.Booked &&
                        a.Start >= dayStart && a.Start < dayEnd)
            .OrderBy(a => a.Start)
            .ToListAsync();

        servicesForStaff = await Db.Services
            .Where(s => s.StaffId == SelectedStaffId.Value && s.IsActive)
            .OrderBy(s => s.Name)
            .ToListAsync();

        // nakon svakog reloada za dan/djelatnika – rebuild slobodnih početaka
        RebuildAvailableStarts();

        StateHasChanged();
    }

    // ===== Helpers za izračun slobodnih početaka i kraja =====

    private void RebuildAvailableStarts()
    {
        availableStarts.Clear();

        if (!SelectedStaffId.HasValue) return;
        if (!add_ServiceId.HasValue) return;

        var svc = servicesForStaff.FirstOrDefault(x => x.Id == add_ServiceId.Value);
        if (svc == null) return;

        // Radno vrijeme – po potrebi prilagodi
        var workStart = new DateTime(SelectedDate.Year, SelectedDate.Month, SelectedDate.Day, 9, 0, 0);
        var workEnd = new DateTime(SelectedDate.Year, SelectedDate.Month, SelectedDate.Day, 17, 0, 0);

        // kandidati svakih 30 min
        const int stepMin = 30;
        for (var t = workStart; t <= workEnd.AddMinutes(-svc.DurationMin); t = t.AddMinutes(stepMin))
        {
            var candStart = t;
            var candEnd = t.AddMinutes(svc.DurationMin);

            bool overlaps = booked.Any(a => a.Start < candEnd && candStart < a.End);
            if (!overlaps)
                availableStarts.Add(candStart.ToString("HH:mm"));
        }

        // uskladi trenutno odabrani početak
        if (availableStarts.Count == 0)
        {
            add_StartTime = "";
            add_EndTime = "";
        }
        else
        {
            if (string.IsNullOrEmpty(add_StartTime) || !availableStarts.Contains(add_StartTime))
                add_StartTime = availableStarts[0];

            AutoComputeEnd();
        }
    }

    private void AutoComputeEnd()
    {
        if (!add_ServiceId.HasValue) { add_EndTime = ""; return; }
        var svc = servicesForStaff.FirstOrDefault(x => x.Id == add_ServiceId.Value);
        if (svc == null) { add_EndTime = ""; return; }

        if (!TimeOnly.TryParse(add_StartTime, out var tStart)) { add_EndTime = ""; return; }

        add_EndTime = tStart.AddMinutes(svc.DurationMin).ToString("HH:mm");
    }

    private string ComputedEndPreview
    {
        get
        {
            if (string.IsNullOrEmpty(add_EndTime)) return "--:--";
            return add_EndTime;
        }
    }

    // ===== Modal helpers =====
    private void CloseAddBlock()
    {
        showAddBlock = false;
        error = null;
        isSaving = false;
    }

    private async Task SaveAddBlockAsync()
    {
        error = null;

        if (!SelectedStaffId.HasValue)
        {
            error = "Nema odabranog djelatnika.";
            return;
        }

        if (!add_ServiceId.HasValue)
        {
            error = "Odaberi uslugu.";
            return;
        }

        if (string.IsNullOrWhiteSpace(add_StartTime))
        {
            error = "Nema odabranog početka.";
            return;
        }

        if (!TimeOnly.TryParse(add_StartTime, out var tStart))
        {
            error = "Neispravno vrijeme početka.";
            return;
        }

        var svc = servicesForStaff.FirstOrDefault(x => x.Id == add_ServiceId.Value);
        if (svc == null)
        {
            error = "Usluga nije pronađena.";
            return;
        }

        var start = DateOnly.FromDateTime(SelectedDate).ToDateTime(tStart);
        var end = start.AddMinutes(svc.DurationMin);

        if (string.IsNullOrWhiteSpace(add_ClientFullName))
        {
            error = "Unesi ime i prezime klijenta.";
            return;
        }

        // provjera preklapanja s postojećim Booked
        var overlaps = await Db.Appointments.AnyAsync(a =>
            a.StaffId == SelectedStaffId.Value &&
            a.Status == AppointmentStatus.Booked &&
            a.Start < end && start < a.End);

        if (overlaps)
        {
            error = "Preklapa se s postojećim terminom.";
            return;
        }

        isSaving = true;

        // Upsert klijenta (preko emaila/telefona)
        Client? client = null;
        var email = string.IsNullOrWhiteSpace(add_ClientEmail) ? null : add_ClientEmail.Trim();
        var phone = string.IsNullOrWhiteSpace(add_ClientPhone) ? null : add_ClientPhone.Trim();
        var name = add_ClientFullName!.Trim();

        if (!string.IsNullOrWhiteSpace(email))
            client = await Db.Clients.FirstOrDefaultAsync(c => c.Email == email);
        if (client is null && !string.IsNullOrWhiteSpace(phone))
            client = await Db.Clients.FirstOrDefaultAsync(c => c.Phone == phone);
        if (client is null)
            client = await Db.Clients.FirstOrDefaultAsync(c => c.FullName == name && c.Email == email && c.Phone == phone);

        if (client is null)
        {
            client = new Client { FullName = name, Email = email, Phone = phone };
            Db.Clients.Add(client);
            await Db.SaveChangesAsync(); // treba nam ClientId
        }
        else
        {
            // dopuni prazna polja
            if (string.IsNullOrWhiteSpace(client.FullName)) client.FullName = name;
            if (string.IsNullOrWhiteSpace(client.Email) && email is not null) client.Email = email;
            if (string.IsNullOrWhiteSpace(client.Phone) && phone is not null) client.Phone = phone;
            await Db.SaveChangesAsync();
        }

        var appt = new Appointment
            {
                StaffId = SelectedStaffId.Value,
                ServiceId = add_ServiceId.Value,
                Start = start,
                End = end,
                Status = AppointmentStatus.Booked,
                Notes = add_Notes,
                ClientId = client.Id
            };

        Db.Appointments.Add(appt);
        await Db.SaveChangesAsync();
        isSaving = false;

        CloseAddBlock();
        await LoadDayAsync();
    }

    private async Task DeleteBookingAsync(int id)
    {
        var appt = await Db.Appointments.FindAsync(id);
        if (appt is null) return;

        Db.Appointments.Remove(appt);
        await Db.SaveChangesAsync();
        await LoadDayAsync();
    }
}

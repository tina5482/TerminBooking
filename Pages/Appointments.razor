@page "/appointments"
@using System.Timers
@using TerminBooking.Data
@using TerminBooking.Domain
@using Microsoft.EntityFrameworkCore
@using Radzen
@inject ApplicationDbContext Db
@inject DialogService DialogService

@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@implements IDisposable

<h3>Upravljanje terminima</h3>

<!-- Odabir djelatnika (RadzenDropDown) -->
<div class="mb-3" style="max-width:420px">
    <label class="form-label">Djelatnik</label>
    <RadzenDropDown Data="@staffList"
                    TItem="Staff" TValue="int?"
                    TextProperty="Name" ValueProperty="Id"
                    @bind-Value="SelectedStaffId"
                    AllowClear="true"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    Placeholder="-- Odaberi djelatnika --"
                    Change="OnStaffChangedRadzen" />
</div>

<!-- Datum -->
<div class="mb-3" style="max-width:260px">
    <label class="form-label">Datum</label>
    <InputDate @bind-Value="SelectedDate" TValue="DateTime" class="form-control" />
</div>

@if (!SelectedStaffId.HasValue)
{
    <div class="alert alert-warning">Odaberi djelatnika kako bi vidjela njegove bookirane termine.</div>
}
else
{
    <div class="d-flex justify-content-between align-items-center mb-2">
        <h5>Rezervirani termini — @CurrentStaffName — @SelectedDate.ToString("dd.MM.yyyy.") (@booked.Count)</h5>

        <RadzenButton Text="Dodaj termin" ButtonStyle="ButtonStyle.Primary"
                      Click="OpenAddBlockDialogAsync" />
    </div>

    <!-- Grid termina -->
    <RadzenDataGrid Data="@booked" TItem="Appointment"
                    class="rg-fixed"
                    AllowFiltering="false"
                    AllowSorting="true"
                    AllowPaging="true" PageSize="10"
                    RowHover="true" Responsive="false"
                    CellRender="OnCellRender"
                    Style="border-radius:12px; box-shadow:0 6px 24px rgba(0,0,0,.08)">
        <Columns>
            <RadzenDataGridColumn TItem="Appointment" Property="Start" Title="Početak"
                                  FormatString="{0:HH:mm}" Width="110px" />
            <RadzenDataGridColumn TItem="Appointment" Property="End" Title="Kraj"
                                  FormatString="{0:HH:mm}" Width="100px" />
            <RadzenDataGridColumn TItem="Appointment" Title="Usluga" Width="18%">
                <Template Context="a"><div class="cell-ellipsis">@a.Service?.Name</div></Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Appointment" Title="Klijent" Width="18%">
                <Template Context="a"><div class="cell-ellipsis">@a.Client?.FullName</div></Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Appointment" Title="Email" Width="22%">
                <Template Context="a"><div class="cell-ellipsis">@a.Client?.Email</div></Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Appointment" Title="Mobitel" Width="12%">
                <Template Context="a"><div class="cell-ellipsis">@a.Client?.Phone</div></Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Appointment" Title="Napomena" Width="18%">
                <Template Context="a">
                    <div class="note-wrap" title="@a.Notes">@a.Notes</div>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Appointment" Title="" Width="56px">
                <Template Context="a">
                    <RadzenButton Icon="delete"
                                  ButtonStyle="ButtonStyle.Danger"
                                  Size="ButtonSize.Small"
                                  Click="@(()=>ConfirmDeleteAsync(a.Id))" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>

        <EmptyTemplate>
            <div class="text-muted p-3">Nema bookiranih termina za ovaj dan.</div>
        </EmptyTemplate>
    </RadzenDataGrid>
}

@code {
    // ===== State =====
    private List<Staff> staffList = new();
    private int? SelectedStaffId { get; set; }
    private string SelectedStaffIdString => SelectedStaffId?.ToString() ?? "";

    private DateTime _selectedDate = DateTime.Today;
    private DateTime SelectedDate
    {
        get => _selectedDate;
        set
        {
            if (_selectedDate != value)
            {
                _selectedDate = value;
                _ = LoadDayAsync();
            }
        }
    }

    private string CurrentStaffName => staffList.FirstOrDefault(s => s.Id == SelectedStaffId)?.Name ?? "";

    private List<Appointment> booked = new();
    private List<Service> servicesForStaff = new();

    // --- Početak/Kraj ---
    private string _add_StartTime = "";
    private string add_StartTime
    {
        get => _add_StartTime;
        set
        {
            _add_StartTime = value ?? _add_StartTime;
            AutoComputeEnd();
        }
    }
    private string add_EndTime = "";

    private List<string> availableStarts = new();

    // --- Usluga ---
    private int? _add_ServiceId;
    private int? add_ServiceId
    {
        get => _add_ServiceId;
        set
        {
            _add_ServiceId = value;
            RebuildAvailableStarts();
            add_StartTime = "";
            add_EndTime = "";
            StateHasChanged();
        }
    }

    private string? add_Notes;
    private string? error;
    private bool isSaving = false;

    // klijent u dijalogu
    private string? add_ClientFullName;
    private string? add_ClientEmail;
    private string? add_ClientPhone;

    private void OnClientNameChanged(ChangeEventArgs e) => add_ClientFullName = e?.Value?.ToString();
    private void OnClientEmailChanged(ChangeEventArgs e) => add_ClientEmail = e?.Value?.ToString();
    private void OnClientPhoneChanged(ChangeEventArgs e) => add_ClientPhone = e?.Value?.ToString();

    // ===== Auto-refresh timer (.NET) =====
    private System.Timers.Timer? _refreshTimer;
    private bool _autoRefreshing = false;

    protected override async Task OnInitializedAsync()
    {
        // svježi upiti
        staffList = await Db.Staff.AsNoTracking()
                     .Where(x => x.IsActive)
                     .OrderBy(x => x.Name)
                     .ToListAsync();

        if (staffList.Any())
            SelectedStaffId = staffList.First().Id;

        StartAutoRefresh(); // pokreni timer
        await LoadDayAsync();
    }

    private void StartAutoRefresh()
    {
        _refreshTimer = new System.Timers.Timer(5000); // 5s
        _refreshTimer.AutoReset = true;
        _refreshTimer.Elapsed += OnRefreshTimerElapsed;
        _refreshTimer.Start();
    }

    private async void OnRefreshTimerElapsed(object? sender, ElapsedEventArgs e)
    {
        // Timer radi na pozadinskom threadu -> sve UI akcije kroz InvokeAsync
        await InvokeAsync(async () =>
    {
        if (_autoRefreshing || !SelectedStaffId.HasValue) return;
        _autoRefreshing = true;
        try
        {
            await LoadDayAsync();
        }
        finally
        {
            _autoRefreshing = false;
        }
    });
    }

    public void Dispose()
    {
        if (_refreshTimer is not null)
        {
            _refreshTimer.Elapsed -= OnRefreshTimerElapsed;
            _refreshTimer.Stop();
            _refreshTimer.Dispose();
        }
    }

    // ===== UI handlers =====
    private async Task OnStaffChangedRadzen(object? value)
    {
        SelectedStaffId = value is int i ? i : value as int?;
        add_ServiceId = null;
        availableStarts.Clear();
        add_StartTime = "";
        add_EndTime = "";
        await LoadDayAsync();
    }

    private async Task OnStaffChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e?.Value?.ToString(), out var id))
            SelectedStaffId = id;
        else
            SelectedStaffId = null;

        add_ServiceId = null;
        availableStarts.Clear();
        add_StartTime = "";
        add_EndTime = "";
        await LoadDayAsync();
    }

    private void OnNotesChanged(ChangeEventArgs e) => add_Notes = e?.Value?.ToString();

    // ===== Data load =====
    private async Task LoadDayAsync()
    {
        booked.Clear();
        servicesForStaff.Clear();
        error = null;

        if (!SelectedStaffId.HasValue)
        {
            availableStarts.Clear();
            StateHasChanged();
            return;
        }

        var dayStart = new DateTime(SelectedDate.Year, SelectedDate.Month, SelectedDate.Day, 0, 0, 0);
        var dayEnd = dayStart.AddDays(1);

        booked = await Db.Appointments.AsNoTracking()
        .Include(a => a.Service)
        .Include(a => a.Client)
        .Where(a => a.StaffId == SelectedStaffId.Value &&
                    a.Status == AppointmentStatus.Booked &&
                    a.Start >= dayStart && a.Start < dayEnd)
        .OrderBy(a => a.Start)
        .ToListAsync();

        servicesForStaff = await Db.Services.AsNoTracking()
        .Where(s => s.StaffId == SelectedStaffId.Value && s.IsActive)
        .OrderBy(s => s.Name)
        .ToListAsync();

        if (add_ServiceId.HasValue) RebuildAvailableStarts();

        StateHasChanged();
    }

    // ===== Helpers =====
    private void RebuildAvailableStarts()
    {
        availableStarts.Clear();

        if (!SelectedStaffId.HasValue) return;
        if (!add_ServiceId.HasValue) return;

        var svc = servicesForStaff.FirstOrDefault(x => x.Id == add_ServiceId.Value);
        if (svc == null) return;

        var workStart = new DateTime(SelectedDate.Year, SelectedDate.Month, SelectedDate.Day, 9, 0, 0);
        var workEnd = new DateTime(SelectedDate.Year, SelectedDate.Month, SelectedDate.Day, 17, 0, 0);

        const int stepMin = 30;
        for (var t = workStart; t <= workEnd.AddMinutes(-svc.DurationMin); t = t.AddMinutes(stepMin))
        {
            var candStart = t;
            var candEnd = t.AddMinutes(svc.DurationMin);

            bool overlaps = booked.Any(a => a.Start < candEnd && candStart < a.End);
            if (!overlaps)
                availableStarts.Add(candStart.ToString("HH:mm"));
        }
    }

    private void AutoComputeEnd()
    {
        if (!add_ServiceId.HasValue) { add_EndTime = ""; return; }
        var svc = servicesForStaff.FirstOrDefault(x => x.Id == add_ServiceId.Value);
        if (svc == null) { add_EndTime = ""; return; }

        if (string.IsNullOrWhiteSpace(add_StartTime) || !TimeOnly.TryParse(add_StartTime, out var tStart))
        { add_EndTime = ""; return; }

        add_EndTime = tStart.AddMinutes(svc.DurationMin).ToString("HH:mm");
    }

    private string ComputedEndPreview => string.IsNullOrEmpty(add_EndTime) ? "--:--" : add_EndTime;

    // ===== Radzen dialog =====
    async Task OpenAddBlockDialogAsync()
    {
        ResetAddBlockForm();

        if (!servicesForStaff.Any())
            await LoadDayAsync();

        if (servicesForStaff.Any())
            add_ServiceId = servicesForStaff.First().Id;

        await DialogService.OpenAsync("Dodaj blok (Booked)", ds => @<div>
        <div class="mb-2" style="max-width:420px">
            <label class="form-label">Usluga</label>
            <RadzenDropDown Data="@servicesForStaff"
                            TItem="Service" TValue="int?"
                            TextProperty="Name" ValueProperty="Id"
                            @bind-Value="add_ServiceId"
                            AllowClear="true"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            Placeholder="-- Odaberi uslugu --" />
        </div>

        <div class="row g-2">
            <div class="col-12" style="max-width:320px">
                <label class="form-label">Početak</label>
                <RadzenDropDown Data="@availableStarts"
                                TItem="string" TValue="string"
                                @bind-Value="add_StartTime"
                                AllowClear="true"
                                Disabled="@(!availableStarts.Any())"
                                Placeholder="-- Odaberi početak --" />
            </div>
        </div>

        <div class="mt-2">
            <label class="form-label">Napomena (opcionalno)</label>
            <input class="form-control" value="@add_Notes" @onchange="OnNotesChanged" />
        </div>

        <hr />

        <h6>Podaci o klijentu</h6>
        <div class="mb-2">
            <label class="form-label">Ime i prezime *</label>
            <input class="form-control" value="@add_ClientFullName" @onchange="OnClientNameChanged" placeholder="Ime i prezime" />
        </div>
        <div class="row g-2">
            <div class="col">
                <label class="form-label">Email</label>
                <input type="email" class="form-control" value="@add_ClientEmail" @onchange="OnClientEmailChanged" placeholder="ime@email.com" />
            </div>
            <div class="col">
                <label class="form-label">Mobitel</label>
                <input type="tel" class="form-control" value="@add_ClientPhone" @onchange="OnClientPhoneChanged" placeholder="091 234 5678" />
            </div>
        </div>

        @if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger mt-3">@error</div>
    }

        <div class="d-flex justify-content-end gap-2 mt-3">
            <RadzenButton Text="Odustani" ButtonStyle="ButtonStyle.Secondary" Click="CloseDialog" />
            <RadzenButton Text="Spremi" ButtonStyle="ButtonStyle.Primary" Click="SaveAddBlockAsync" Disabled="@isSaving" />
        </div>
    </div>);
    }

    void CloseDialog()
    {
        ResetAddBlockForm();
        DialogService.Close();
    }

    private async Task ConfirmDeleteAsync(int id)
    {
        var ok = await DialogService.Confirm("Sigurno želiš obrisati termin?", "Potvrda",
                    new ConfirmOptions { OkButtonText = "Obriši", CancelButtonText = "Odustani" });
        if (ok == true)
        {
            await DeleteBookingAsync(id);
        }
    }

    private async Task SaveAddBlockAsync()
    {
        error = null;

        if (!SelectedStaffId.HasValue) { error = "Nema odabranog djelatnika."; return; }
        if (!add_ServiceId.HasValue) { error = "Odaberi uslugu."; return; }
        if (string.IsNullOrWhiteSpace(add_StartTime)) { error = "Nema odabranog početka."; return; }
        if (!TimeOnly.TryParse(add_StartTime, out var tStart)) { error = "Neispravno vrijeme početka."; return; }

        var svc = servicesForStaff.FirstOrDefault(x => x.Id == add_ServiceId.Value);
        if (svc == null) { error = "Usluga nije pronađena."; return; }

        var start = DateOnly.FromDateTime(SelectedDate).ToDateTime(tStart);
        var end = start.AddMinutes(svc.DurationMin);

        if (string.IsNullOrWhiteSpace(add_ClientFullName)) { error = "Unesi ime i prezime klijenta."; return; }

        var overlaps = await Db.Appointments.AnyAsync(a =>
            a.StaffId == SelectedStaffId.Value &&
            a.Status == AppointmentStatus.Booked &&
            a.Start < end && start < a.End);

        if (overlaps) { error = "Preklapa se s postojećim terminom."; return; }

        isSaving = true;

        Client? client = null;
        var email = string.IsNullOrWhiteSpace(add_ClientEmail) ? null : add_ClientEmail.Trim();
        var phone = string.IsNullOrWhiteSpace(add_ClientPhone) ? null : add_ClientPhone.Trim();
        var name = add_ClientFullName!.Trim();

        if (!string.IsNullOrWhiteSpace(email))
            client = await Db.Clients.FirstOrDefaultAsync(c => c.Email == email);
        if (client is null && !string.IsNullOrWhiteSpace(phone))
            client = await Db.Clients.FirstOrDefaultAsync(c => c.Phone == phone);
        if (client is null)
            client = await Db.Clients.FirstOrDefaultAsync(c => c.FullName == name && c.Email == email && c.Phone == phone);

        if (client is null)
        {
            client = new Client { FullName = name, Email = email, Phone = phone };
            Db.Clients.Add(client);
            await Db.SaveChangesAsync();
        }
        else
        {
            if (string.IsNullOrWhiteSpace(client.FullName)) client.FullName = name;
            if (string.IsNullOrWhiteSpace(client.Email) && email is not null) client.Email = email;
            if (string.IsNullOrWhiteSpace(client.Phone) && phone is not null) client.Phone = phone;
            await Db.SaveChangesAsync();
        }

        var appt = new Appointment
            {
                StaffId = SelectedStaffId.Value,
                ServiceId = add_ServiceId.Value,
                Start = start,
                End = end,
                Status = AppointmentStatus.Booked,
                Notes = add_Notes,
                ClientId = client.Id
            };

        Db.Appointments.Add(appt);
        await Db.SaveChangesAsync();
        isSaving = false;

        ResetAddBlockForm();
        DialogService.Close();

        await LoadDayAsync(); // odmah osvježi grid
    }

    private async Task DeleteBookingAsync(int id)
    {
        var appt = await Db.Appointments.FindAsync(id);
        if (appt is null) return;

        Db.Appointments.Remove(appt);
        await Db.SaveChangesAsync();
        await LoadDayAsync();
    }

    // ===== Wrap za Napomenu na samom <td> =====
    void OnCellRender(DataGridCellRenderEventArgs<Appointment> args)
    {
        var isNoteCol = string.Equals(args.Column?.Title?.ToString(), "Napomena", StringComparison.OrdinalIgnoreCase)
                        || string.Equals(args.Column?.Property, "Notes", StringComparison.OrdinalIgnoreCase);

        if (isNoteCol)
        {
            args.Attributes["style"] = "white-space: normal; vertical-align: top; word-break: break-word;";
        }
    }

    // ===== Reset forme =====
    void ResetAddBlockForm()
    {
        _add_ServiceId = null;
        availableStarts.Clear();

        _add_StartTime = "";
        add_EndTime = "";

        add_Notes = null;
        add_ClientFullName = null;
        add_ClientEmail = null;
        add_ClientPhone = null;

        error = null;
        isSaving = false;
    }
}

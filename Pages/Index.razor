@page "/"
@using TerminBooking.Data
@using TerminBooking.Domain
@using Microsoft.EntityFrameworkCore
@using Radzen
@inject ApplicationDbContext Db
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@implements IDisposable

<h3>Rezervirani termini — danas</h3>

<div class="d-flex gap-2 mb-3">
    <RadzenButton Icon="refresh" Text="Osvježi" ButtonStyle="ButtonStyle.Light"
                  Click="LoadToday" Disabled="@_isLoading" />
    <span class="text-muted small align-self-center">
        Auto-osvježavanje svakih 10 s.
    </span>
</div>

@if (_isLoading && booked.Count == 0)
{
    <div>Učitavanje…</div>
}
else if (booked.Count == 0)
{
    <div>Nema bookiranih termina za danas.</div>
}
else
{
    <RadzenDataGrid Data="@booked" TItem="Appointment"
                    class="rg-fixed"
                    AllowFiltering="false"
                    AllowSorting="true"
                    AllowPaging="true" PageSize="25"
                    RowHover="true" Responsive="false"
                    CellRender="OnCellRender"
                    Style="border-radius:12px; box-shadow:0 6px 24px rgba(0,0,0,.08)">
        <Columns>
            <RadzenDataGridColumn TItem="Appointment" Title="Vrijeme" Width="140px">
                <Template Context="a">@a.Start.ToString("HH:mm")–@a.End.ToString("HH:mm")</Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Appointment" Title="Djelatnik" Width="22%">
                <Template Context="a"><div class="cell-ellipsis">@a.Staff?.Name</div></Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Appointment" Title="Usluga" Width="26%">
                <Template Context="a"><div class="cell-ellipsis">@a.Service?.Name</div></Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Appointment" Title="Napomena">
                <Template Context="a">
                    <div class="note-wrap" title="@a.Notes">@a.Notes</div>
                </Template>
            </RadzenDataGridColumn>
        </Columns>

        <EmptyTemplate>
            <div class="text-muted p-3">Nema bookiranih termina za danas.</div>
        </EmptyTemplate>
    </RadzenDataGrid>
}

@code {
    private List<Appointment> booked = new();
    private bool _isLoading;

    private System.Threading.PeriodicTimer? _timer;
    private CancellationTokenSource? _cts;

    protected override async Task OnInitializedAsync()
    {
        await LoadToday();

        // auto-refresh svakih 10 s
        _cts = new CancellationTokenSource();
        _timer = new System.Threading.PeriodicTimer(TimeSpan.FromSeconds(10));
        _ = AutoRefreshAsync();
    }

    private async Task AutoRefreshAsync()
    {
        if (_timer is null || _cts is null) return;

        try
        {
            while (await _timer.WaitForNextTickAsync(_cts.Token))
            {
                await LoadToday();
                StateHasChanged();
            }
        }
        catch (OperationCanceledException) { }
    }

    private async Task LoadToday()
    {
        _isLoading = true;

        var start = DateTime.Today;
        var end = start.AddDays(1);

        booked = await Db.Appointments
            .AsNoTracking()
            .Include(a => a.Staff)
            .Include(a => a.Service)
            .Where(a => a.Status == AppointmentStatus.Booked
                     && a.Start >= start
                     && a.End < end)
            .OrderBy(a => a.Start)
            .ToListAsync();

        _isLoading = false;
    }

    public void Dispose()
    {
        _cts?.Cancel();
        _timer?.Dispose();
        _cts?.Dispose();
    }

    // Wrap Napomena na <td> (isto kao na Appointments)
    void OnCellRender(DataGridCellRenderEventArgs<Appointment> args)
    {
        var isNoteCol = string.Equals(args.Column?.Title?.ToString(), "Napomena", StringComparison.OrdinalIgnoreCase)
                        || string.Equals(args.Column?.Property, "Notes", StringComparison.OrdinalIgnoreCase);

        if (isNoteCol)
        {
            args.Attributes["style"] =
                "white-space: normal; vertical-align: top; word-break: break-word;";
        }
    }
}
